=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#enchant
=end

class Enchant
  def initialize
    @settings = get_settings
    @book_type = 'artificing'
    @cube = @settings.cube_armor_piece
    @bag = @settings.crafting_container
    @bag_items = @settings.crafting_items_in_container
    @belt = @settings.enchanting_belt
    @bag = @settings.crafting_container
    @stamp = @settings.mark_crafted_goods
    @worn_trashcan = @settings.worn_trashcan
    @worn_trashcan_verb = @settings.worn_trashcan_verb

    arg_definitions = [
      [
        { name: 'chapter', regex: /\d+/i, variable: true, description: 'Required: Chapter containing the item.' },
        { name: 'recipe', display: 'recipe name', regex: /^[A-z\s\-']+$/i, variable: true, description: 'Required: Name of the recipe, wrap in double quotes if this is multiple words.' },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Required: Noun of finished product, can wrap in double quotes if this is multiple words. Example: "small brazier"' },
        { name: 'base_noun', regex: /\w+/i, variable: true, optional: true, description: 'Optional: Noun of base item that will change once started.  Example: short pole turns into a loop once placed on brazier.' }

      ],
      [
        { name: 'resume', regex: /resume/i },
        { name: 'noun', regex: /\w+/i, variable: true, description: 'Noun of item to resume.' },
      ]
    ]

    Flags.add('enchant-focus', 'material struggles to accept the sigil scribing')
    Flags.add('enchant-meditate', 'The traced sigil pattern blurs before your eyes')
    Flags.add('enchant-imbue', 'Once finished you sense an imbue spell will be required to continue enchanting')
    Flags.add('enchant-push', 'You notice many of the scribed sigils are slowly merging back')
    Flags.add('enchant-sigil', /You need another (?<type>[\w ]*)(?<order>primary|secondary) sigil to continue the enchanting process/)
    Flags.add('enchant-complete', 'With the enchanting process completed, you believe it is safe to collect your things once more.', 'With the enchantment complete', 'With enchanting complete', /^You collect the \w+ and place it at your feet/)
    Flags.add('imbue-failed', 'The streams collide, rending the space before you and disrupting the enchantment')
    Flags.add('imbue-backlash', 'Suddenly the streams slip through your grasp and cascade violently against each other')

    @brazier = @settings.enchanting_tools.find { |item| /brazier/ =~ item } || 'brazier'
    @fount = @settings.enchanting_tools.find { |item| /fount/ =~ item } || 'fount'
    @loop = @settings.enchanting_tools.find { |item| /loop/ =~ item } || 'aug loop'
    @imbue_wand = @settings.enchanting_tools.find { |item| /wand|rod/ =~ item } || 'rod'
    @burin = @settings.enchanting_tools.find { |item| /burin/ =~ item } || 'burin'

    @use_own_brazier = true
    DRRoom.room_objs.each do |obj|
      if obj.include?("enchanter's brazier")
        @brazier = "enchanter's brazier"
        @use_own_brazier = false
      end
    end

    args = parse_args(arg_definitions)

    @baseitem = args.base_noun || args.noun
    @item = args.noun
    @chapter = args.chapter
    @recipe = args.recipe
    @resume = args.resume
    @primary_sigils = []
    @secondary_sigils = []

    @equipment_manager = EquipmentManager.new
    @equipment_manager.empty_hands
    DRC.wait_for_script_to_complete('buff', ['enchant'])
    if @resume
      DRCC.get_crafting_item(@brazier, @bag, @bag_items, @belt)
      case DRC.bput("analyze #{@item} on my brazier", /scribing additional sigils onto the fount./, /ready for additional scribing./, /application of an imbue spell to advance the enchanting process./, /free of problems that would impede further sigil scribing./, /You do not see anything that would prevent scribing additional sigils/)
      when /scribing additional sigils onto the fount./, /ready for additional scribing./, /free of problems that would impede further sigil scribing./, /You do not see anything that would prevent scribing additional sigils/
        DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)
        scribe
      when /application of an imbue spell to advance the enchanting process./
        case DRC.bput("look on my #{@brazier}", /On the.*brazier you see.*and a.*/)
        when /On the.*brazier you see.*and a.*/
          imbue
        else
          DRCC.get_crafting_item(@fount, @bag, @bag_items, @belt)
          case DRC.bput("wave my #{@fount} at #{@item} on #{@brazier}", /^You slowly wave/, 'The fragile mana fount is not required')
          when 'The fragile mana fount is not required'
            DRCC.stow_crafting_item(@fount, @bag, @belt)
          end
          imbue
        end
      end
    else
      study_recipe
      @item = 'fount' if @item == 'small sphere'

      unless @item == "fount"

        unless DRCI.exists?(@fount)
          cleanup
          exit
        end

        DRCC.get_crafting_item(@fount, @bag, @bag_items, @belt)
        case DRC.bput("wave my #{@fount} at #{@item} on #{@brazier}", /^You slowly wave/, 'The fragile mana fount is not required')
        when 'The fragile mana fount is not required'
          DRCC.stow_crafting_item(@fount, @bag, @belt)
        end
      end

      DRC.bput("touch my #{@cube}", /^Warm vapor swirls around your head in a misty halo/, /^A thin cloud of vapor manifests with no particular effect./, /^Touch what/) if @cube
      imbue

      DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)
      scribe
    end
  end

  def study_recipe
    if @settings.master_crafting_book
      DRCC.find_recipe2(@chapter, @recipe, @settings.master_crafting_book, @book_type)
    else
      DRCC.get_crafting_item("#{@book_type} book", @bag, @bag_items, @forging_belt)
      DRCC.find_recipe2(@chapter, @recipe)
      DRCC.stow_crafting_item("book", @bag, @forging_belt)
    end
    DRCC.get_crafting_item(@brazier, @bag, @bag_items, @belt) if @use_own_brazier

    case DRC.bput("get my #{@baseitem} from my #{@bag}", 'You get a', 'That is far too dangerous')
    when 'That is far too dangerous'
      clean_brazier
      empty_brazier
      DRC.bput("get my #{@baseitem} from my #{@bag}", 'You get a')
    end
    2.times do
      case DRC.bput("put my #{@baseitem} on #{@brazier}", /^You glance down/, /With a flick/, /^You must first clean/, /^You put/, /^The totem is already enchanted/)
      when /^The totem is already enchanted/
        DRCI.dispose_trash('totem', @worn_trashcan, @worn_trashcan_verb)
        study_recipe
      when /With a flick/, /^You put/
        waitrt?
        break
      when /^You must first clean/
        clean_brazier
        empty_brazier
        DRC.bput("get my #{@baseitem} from my #{@bag}", 'You get a')
        2.times do
          case DRC.bput("put my #{@baseitem} on #{@brazier}", 'You glance down', 'With a flick', 'You put')
          when 'With a flick', 'You put'
            waitrt?
            break
          end
        end
      end
    end
  end

  def imbue
    imbue_data = @settings['waggle_sets']['imbue']['Imbue']
    if imbue_data
      DRC.bput('prepare symbiosis', 'You recall the exact details of the', 'But you\'ve already prepared', 'Please don\'t do that here')
      DRC.bput('release symbiosis', "But you haven't", 'You release', 'Repeat this command')
      if XMLData.prepared_spell
        DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
        DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
	    end
      imbue_data['cast'] = "cast #{@item} on #{@brazier}"
      until DRCA.cast_spell?(imbue_data, @settings)
        DRC.message("Casting Imbue failed. Retrying")
      end
    else
      DRCC.get_crafting_item(@imbue_wand, @bag, @bag_items, @belt) unless DRC.left_hand.include?(@imbue_wand)
      case DRC.bput("wave #{@imbue_wand} at #{@item} on #{@brazier}", /^Roundtime/, /^You need another .* sigil to continue the enchanting process/, 'The streams collide, rending the space before you and disrupting the enchantment')
      when 'The streams collide, rending the space before you and disrupting the enchantment'
        # Imbue wand failed.  Let's try again
        imbue
      else
        DRCC.stow_crafting_item(@imbue_wand, @bag, @belt) if DRC.left_hand.include?(@imbue_wand)
      end
    end
    Flags.reset('enchant-imbue')
  end

  def clean_brazier
    case DRC.bput("clean #{@brazier}", 'You prepare to clean off the brazier', 'There is nothing', 'The brazier is not currently lit')
    when 'You prepare to clean off the brazier'
      DRC.bput("clean #{@brazier}", 'a massive ball of flame jets forward and singes everything nearby')
    when 'The brazier is not currently lit'
      DRCC.stow_crafting_item(DRC.left_hand, @bag, @belt) if DRC.left_hand
    end
  end

  def empty_brazier
    DRCC.stow_crafting_item(DRC.left_hand, @bag, @belt) if DRC.left_hand
    case DRC.bput("look on #{@brazier}", /On the (.*)brazier you see (.*)./, 'There is nothing')
    when /On the (.*)brazier you see (.*)./
      items = Regexp.last_match(2)
      items = items.split(' and ')
      items.each do |item|
        item = item.split.last
        DRC.bput("get #{item} from brazier", 'You get')
        DRCC.stow_crafting_item(item, @bag, @belt)
      end
    end
  end

  def trace_sigil(sigil)
    DRCI.get_item?("#{sigil} sigil")
    DRC.bput("study my #{sigil} sigil", /^You study the sigil-scroll and commit the design to memory/)
    waitrt?
    DRC.bput("trace #{@item} on #{@brazier}", /^Recalling the intricacies of the sigil, you trace its form/)
  end

  def scribe
    DRCA.crafting_magic_routine(@settings)
    if Flags['enchant-sigil']
      sigil_type = Flags['enchant-sigil'][:type].delete(' ')
      Flags.reset('enchant-sigil')
      sigil_type = 'congruence' if sigil_type == ''
      DRCC.stow_crafting_item(@burin, @bag, @belt)
      trace_sigil(sigil_type)
      DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)
      scribe
    elsif Flags['enchant-focus']
      Flags.reset('enchant-focus')
      DRC.bput("focus #{@item} on #{@brazier}", /Once finished you sense an imbue spell will be required to continue enchanting/, /^Roundtime/, /^You need another .* sigil to continue the enchanting process/)
      waitrt?
      scribe
    elsif Flags['enchant-meditate']
      Flags.reset('enchant-meditate')
      DRC.bput("meditate fount on #{@brazier}", /^Roundtime/, /^You need another .* sigil to continue the enchanting process/)
      waitrt?
      scribe
    elsif Flags['enchant-push']
      Flags.reset('enchant-push')
      DRCC.stow_crafting_item(@burin, @bag, @belt) if DRC.left_hand.include?('burin')
      DRCC.get_crafting_item(@loop, @bag, @bag_items, @belt)
      DRC.bput("push #{@item} on #{@brazier} with my #{@loop}", /^Roundtime/, /^You need another .* sigil to continue the enchanting process/)
      waitrt?
      DRCC.stow_crafting_item(@loop, @bag, @belt)
      DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)
      scribe
    elsif Flags['enchant-imbue']
      Flags.reset('enchant-imbue')
      DRCC.stow_crafting_item(@burin, @bag, @belt) if DRC.left_hand.include?('burin')
      imbue
      DRCC.get_crafting_item(@burin, @bag, @bag_items, @belt)
      scribe
    elsif Flags['imbue-backlash']
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt) if DRC.right_hand
      DRCC.stow_crafting_item(DRC.left_hand, @bag, @belt) if DRC.left_hand
      cleanup
      DRC.wait_for_script_to_complete('safe-room', ['force'])
      exit
    elsif Flags['enchant-complete']
      DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt) if DRC.right_hand
      DRCC.stow_crafting_item(DRC.left_hand, @bag, @belt) if DRC.left_hand
      cleanup
      stamp_item(@item) if @stamp
      exit
    else
      DRC.bput("scribe #{@item} on #{@brazier} with my #{@burin}", /^Roundtime/, /^You need another .* sigil to continue the enchanting process/)
      scribe
    end
  end

  def stamp_item(noun)
    DRCC.get_crafting_item('stamp', @bag, @bag_items, @belt)
    DRC.bput("mark my #{noun} with my stamp", 'carefully hammer the stamp', 'You cannot figure out how to do that', 'too badly damaged', /You lazily wave the stamp over the freshly enchanted/)
    DRCC.stow_crafting_item('stamp', @bag, @belt)
  end

  def cleanup
    DRC.bput('release spell', 'You let your concentration lapse', "You aren't preparing a spell")
    DRC.bput('release mana', 'You release all', "You aren't harnessing any mana")
    DRC.bput('prepare symbiosis', 'You recall the exact details of the', 'But you\'ve already prepared', 'Please don\'t do that here')
    DRC.bput('release symbiosis', "But you haven't", 'You release', 'Repeat this command')
    DRCC.stow_crafting_item(DRC.right_hand, @bag, @belt) if DRC.right_hand
    DRCC.stow_crafting_item(DRC.left_hand, @bag, @belt) if DRC.left_hand
    DRCC.get_crafting_item(@fount, @bag, @bag_items, @belt) unless @item == 'fount'
    DRCC.stow_crafting_item(@fount, @bag, @belt) unless @item == 'fount'
    if DRCI.get_item?(@item)
      DRCC.stow_crafting_item(@item, @bag, @belt)
      DRCI.get_item?(@item)
    end
  end

  def turn_to(section)
    DRC.bput("turn my book to #{section}", 'You turn your', 'The book is already')
  end
end

Enchant.new

before_dying do
  ['enchant-focus', 'enchant-imbue', 'enchant-meditate', 'enchant-push', 'enchant-sigil', 'enchant-complete', 'imbue-failed', 'imbue-backlash'].each { |flag| Flags.delete(flag) }
end
